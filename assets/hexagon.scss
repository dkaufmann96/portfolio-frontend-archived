/* Change this to change the appearance of the hexaons */
$hex-width: (
  lg: 130px,
  md: 130px,
  sm: 150px,
  xs: 100px,
);
$hex-between: (
  lg: 5px,
  md: 5px,
  sm: 5px,
  xs: 5px,
);
$hex-icon: (
  lg: 90px,
  md: 90px,
  sm: 40px,
  xs: 40px,
);

@function hex-width($size) {
  @return map-get($hex-width, $size);
}
@function hex-between($size) {
  @return map-get($hex-between, $size);
}
@function hex-icon($size) {
  @return map-get($hex-icon, $size);
}
@function hex-height($size, $screen) {
  @if ($screen == 'xs') {
    @return calc(#{hex-width($size) / 1.73});
  }
  @return calc(#{hex-width($size) / 1.63});
}
@function hex-margin($size) {
  @return calc(#{hex-width($size) / 2});
}
@function hex-border($size) {
  @return calc(#{hex-margin($size) / 1.63});
}
@function grid-auto-rows($size) {
  @return calc(#{hex-width($size) - 28.87px / 2});
}

$hex-transition: all 0.2s ease;

/* Hexagons */
.hexagon-container {
  display: grid;
  top: 0;
  position: -webkit-sticky;
  position: sticky;
  @media only screen and (min-width: $lg-min-width) {
    grid-auto-rows: grid-auto-rows(lg);
    grid-gap: hex-between(lg) hex-between(lg);
    padding-bottom: hex-border(lg);
    &.split {
      grid-template-columns: hex-width(lg) hex-width(lg);
      .hexagon:nth-child(8n + 3),
      .hexagon:nth-child(8n + 4),
      .hexagon:nth-child(8n + 7),
      .hexagon:nth-child(8n + 8) {
        margin-left: calc(#{hex-width(lg)} / 2 + #{hex-between(lg)} / 2);
      }
    }
    &:not(.split) {
      .hexagon:nth-child(8n + 5),
      .hexagon:nth-child(8n + 6),
      .hexagon:nth-child(8n + 7),
      .hexagon:nth-child(8n + 8) {
        margin-left: calc(#{hex-width(lg)} / 2 + #{hex-between(lg)} / 2);
      }
    }
    grid-template-columns: hex-width(lg) hex-width(lg) hex-width(lg) hex-width(
        lg
      );
  }
  @media only screen and (max-width: $md-max-width) {
    grid-auto-rows: grid-auto-rows(md);
    grid-gap: hex-between(md) hex-between(md);
    padding-bottom: hex-border(md);
    &:not(.split) {
      grid-template-columns: hex-width(md) hex-width(md);
      .hexagon:nth-child(8n + 3),
      .hexagon:nth-child(8n + 4),
      .hexagon:nth-child(8n + 7),
      .hexagon:nth-child(8n + 8) {
        margin-left: calc(#{hex-width(md)} / 2 + #{hex-between(md)} / 2);
      }
    }
    &.split {
      $hex-width: 20%;
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
      grid-gap: 0;
      position: fixed;
      .hexagon::after,
      .hexagon::before,
      .hexagon:nth-child(n + 6) {
        display: none;
      }
      .hexagon {
        margin: 0;
        width: 100%;
      }
      &.shrunk {
        .hexagon {
          height: 10%;
          .showIcon > * {
            transform: scale(0.75);
          }
        }
      }
      padding: 0;
    }
  }
  @media only screen and (max-width: $sm-max-width) {
    grid-auto-rows: grid-auto-rows(sm);
    grid-gap: hex-between(sm) hex-between(sm);
    padding-bottom: hex-border(sm);
    &:not(.split) {
      grid-template-columns: hex-width(sm) hex-width(sm);
      .hexagon:nth-child(8n + 3),
      .hexagon:nth-child(8n + 4),
      .hexagon:nth-child(8n + 7),
      .hexagon:nth-child(8n + 8) {
        margin-left: calc(#{hex-width(sm)} / 2 + #{hex-between(sm)} / 2);
      }
    }
  }
  @media only screen and (max-width: $xs-max-width) {
    grid-auto-rows: grid-auto-rows(xs);
    grid-gap: hex-between(xs) hex-between(xs);
    padding-bottom: hex-border(xs);
    &:not(.split) {
      grid-template-columns: hex-width(xs) hex-width(xs);
      .hexagon:nth-child(8n + 3),
      .hexagon:nth-child(8n + 4),
      .hexagon:nth-child(8n + 7),
      .hexagon:nth-child(8n + 8) {
        margin-left: calc(#{hex-width(xs)} / 2 + #{hex-between(xs)} / 2);
      }
    }
  }
}
.hexagon {
  align-items: center;
  background-color: $color-hex-default;
  cursor: pointer;
  display: flex;
  fill: white;
  justify-content: center;
  position: relative;
  transition: $hex-transition;
  .showText {
    display: none;
  }
  .showIcon > * {
    transform: scale(2);
  }
  @media only screen and (min-width: $lg-min-width) {
    height: hex-height(lg, 'lg');
    width: hex-width(lg);
    margin: hex-border(lg) 0;
    opacity: 0.8;
  }
  @media only screen and (max-width: $md-max-width) {
    height: hex-height(md, 'md');
    width: hex-width(md);
    margin: hex-border(md) 0;
  }
  @media only screen and (max-width: $sm-max-width) {
    height: hex-height(sm, 'sm');
    width: hex-width(sm);
    margin: hex-border(sm) 0;
  }
  @media only screen and (max-width: $xs-max-width) {
    height: hex-height(xs, 'xs');
    width: hex-width(xs);
    margin: hex-border(xs) 0;
  }
}
.hexagon::after,
.hexagon::before {
  @media only screen and (min-width: $lg-min-width) {
    border-left: hex-margin(lg) solid transparent;
    border-right: hex-margin(lg) solid transparent;
  }
  @media only screen and (max-width: $md-max-width) {
    border-left: hex-margin(md) solid transparent;
    border-right: hex-margin(md) solid transparent;
  }
  @media only screen and (max-width: $sm-max-width) {
    border-left: hex-margin(sm) solid transparent;
    border-right: hex-margin(sm) solid transparent;
  }
  @media only screen and (max-width: $xs-max-width) {
    border-left: hex-margin(xs) solid transparent;
    border-right: hex-margin(xs) solid transparent;
  }
  content: '';
  left: 0;
  position: absolute;
  transition: $hex-transition;
  width: 0;
}
.hexagon::after {
  @media only screen and (min-width: $lg-min-width) {
    border-top: hex-border(lg) solid $color-hex-default;
  }
  @media only screen and (max-width: $md-max-width) {
    border-top: hex-border(md) solid $color-hex-default;
  }
  @media only screen and (max-width: $sm-max-width) {
    border-top: hex-border(sm) solid $color-hex-default;
  }
  @media only screen and (max-width: $xs-max-width) {
    border-top: hex-border(xs) solid $color-hex-default;
  }
  top: 100%;
  width: 0;
}
.hexagon::before {
  @media only screen and (min-width: $lg-min-width) {
    border-bottom: hex-border(lg) solid $color-hex-default;
  }
  @media only screen and (max-width: $md-max-width) {
    border-bottom: hex-border(md) solid $color-hex-default;
  }
  @media only screen and (max-width: $sm-max-width) {
    border-bottom: hex-border(sm) solid $color-hex-default;
  }
  @media only screen and (max-width: $xs-max-width) {
    border-bottom: hex-border(xs) solid $color-hex-default;
  }
  bottom: 100%;
}
@media only screen and (min-width: $lg-min-width) {
  .hexagon:hover {
    opacity: 1;
  }

  .hexagon:hover {
    .showIcon {
      display: none;
    }
    .showText {
      display: block;
      text-decoration: none;
      color: #ffff;
    }
  }
}

.hexagon > svg {
  height: 75%;
  transition: $hex-transition;
}

.color-home {
  background-color: $color-home;
}
.color-home::after,
.color-home::before {
  border-top-color: $color-home;
  border-bottom-color: $color-home;
}

.color-about {
  background-color: $color-about;
}
.color-about::after,
.color-about::before {
  border-top-color: $color-about;
  border-bottom-color: $color-about;
}

.color-projects {
  background-color: $color-projects;
}
.color-projects::after,
.color-projects::before {
  border-top-color: $color-projects;
  border-bottom-color: $color-projects;
}

.color-contact {
  background-color: $color-contact;
}
.color-contact::after,
.color-contact::before {
  border-top-color: $color-contact;
  border-bottom-color: $color-contact;
}

.color-imprint {
  background-color: $color-imprint;
}
.color-imprint::after,
.color-imprint::before {
  border-top-color: $color-imprint;
  border-bottom-color: $color-imprint;
}

.color-cv {
  background-color: $color-cv;
}
.color-cv::after,
.color-cv::before {
  border-top-color: $color-cv;
  border-bottom-color: $color-cv;
}

.color-darkmode-light {
  background-color: $color-darkmode-light;
}
.color-darkmode-light::after,
.color-darkmode-light::before {
  border-top-color: $color-darkmode-light;
  border-bottom-color: $color-darkmode-light;
}

.color-darkmode-dark {
  background-color: $color-darkmode-dark;
}
.color-darkmode-dark::after,
.color-darkmode-dark::before {
  border-top-color: $color-darkmode-dark;
  border-bottom-color: $color-darkmode-dark;
}

.color-github {
  background-color: $color-github;
}
.color-github::after,
.color-github::before {
  border-top-color: $color-github;
  border-bottom-color: $color-github;
}

.color-gitlab {
  background-color: $color-gitlab;
}
.color-gitlab::after,
.color-gitlab::before {
  border-top-color: $color-gitlab;
  border-bottom-color: $color-gitlab;
}

.color-linkedin {
  background-color: $color-linkedin;
}
.color-linkedin::after,
.color-linkedin::before {
  border-top-color: $color-linkedin;
  border-bottom-color: $color-linkedin;
}

.color-xing {
  background-color: $color-xing;
}
.color-xing::after,
.color-xing::before {
  border-top-color: $color-xing;
  border-bottom-color: $color-xing;
}

.color-twitter {
  background-color: $color-twitter;
}
.color-twitter::after,
.color-twitter::before {
  border-top-color: $color-twitter;
  border-bottom-color: $color-twitter;
}
